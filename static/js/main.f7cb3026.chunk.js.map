{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latest","setLatest","results","setResults","searchCountries","setSearchCountries","useEffect","axios","all","get","then","responseArr","data","catch","err","console","log","lastupdated","Date","parseInt","updated","toString","countries","filter","item","country","includes","map","i","Card","key","bg","text","className","style","margin","Img","variant","src","countryInfo","flag","Body","Title","Text","value","cases","displayType","thousandSeparator","deaths","recovered","todayCases","todayDeaths","active","critical","Navbar","Brand","href","CardDeck","Footer","Form","Group","controlId","Control","type","placeholder","onChange","e","target","queries","columns","query","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f7cb3026.chunk.js","sourcesContent":["import React,{ useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Columns from 'react-bootstrap/CardColumns';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from \"axios\";\nimport Form from \"react-bootstrap/Form\";\nimport NumberFormat from 'react-number-format';\nimport Navbar from 'react-bootstrap/Navbar';\n\nfunction App() {\n\n  const[latest,setLatest]=useState([]);\n  const[results,setResults]=useState([]);\n  const[searchCountries, setSearchCountries]=useState(\"\");\n\n  useEffect(()=>{\n    axios\n    .all([\n      axios.get(\"https://corona.lmao.ninja/v2/all\"),\n      axios.get(\"https://corona.lmao.ninja/v2/countries?sort=country\")\n    ])\n    \n    .then(responseArr=>{\n      setLatest(responseArr[0].data);\n      setResults(responseArr[1].data);\n  })\n  .catch(err=>{console.log(err);\n  });\n  },[]);\n\n  //date and time parsing \n  const date=new Date(parseInt(latest.updated));\n  const lastupdated=date.toString();\n\n  //search country\nconst filterCountries = results.filter(item => {\nreturn searchCountries !== \"\" ? item.country.includes(searchCountries):item;\n});\n\n  //countries details\n  const countries=filterCountries.map((data,i)=>{\n    return(\n      <Card key={i} bg=\"light\" text=\"dark\" className=\"text-center\"style={{margin:\"10px\"}}>\n    <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n    <Card.Body>\n      <Card.Title>{data.country}</Card.Title>\n      <Card.Text>Cases: <NumberFormat value={data.cases} displayType={'text'} thousandSeparator={true} /></Card.Text>\n      <Card.Text>Deaths: <NumberFormat value={data.deaths} displayType={'text'} thousandSeparator={true} /></Card.Text>\n      <Card.Text>Recovered: <NumberFormat value={data.recovered} displayType={'text'} thousandSeparator={true} /></Card.Text>\n      <Card.Text>Today's Cases: <NumberFormat value={data.todayCases} displayType={'text'} thousandSeparator={true} /></Card.Text>\n      <Card.Text>Today's deaths: <NumberFormat value={data.todayDeaths} displayType={'text'} thousandSeparator={true} /></Card.Text>\n      <Card.Text>Active: <NumberFormat value={data.active} displayType={'text'} thousandSeparator={true} /></Card.Text>\n      <Card.Text>Critical: <NumberFormat value={data.critical} displayType={'text'} thousandSeparator={true} /></Card.Text>\n    </Card.Body>\n  </Card>\n    );\n  });\n\n  //Media queries for cards\n  var queries = [{\n    columns: 2,\n    query: 'min-width: 500px'\n  }, {\n    columns: 3,\n    query: 'min-width: 1000px'\n  }];\n  return (\n    <div>\n      <br/>\n      \n      <Navbar className=\"justify-content-center\" bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand  href=\"#home\">\n      <h1>Covid-19 Live Updates </h1>\n    </Navbar.Brand>\n  </Navbar>\n      <br/>\n      <CardDeck>\n  <Card bg=\"info\" text=\"white\" className=\"text-center\"style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title>TOTAL CASES</Card.Title>\n      <Card.Text>\n        <NumberFormat value={latest.cases} displayType={'text'} thousandSeparator={true} />\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n  <small text=\"white\">Last updated {lastupdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"success\" text={\"white\"} className=\"text-center\"\n  style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title>RECOVERED</Card.Title>\n      <Card.Text>\n        <NumberFormat value={latest.recovered} displayType={'text'} thousandSeparator={true} />\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small  text={\"white\"}>Last updated {lastupdated}</small>\n    </Card.Footer>\n  </Card>\n  <Card bg=\"danger\" text={\"white\"} className=\"text-center\"style={{margin:\"10px\"}}>\n    <Card.Body>\n      <Card.Title>DEATH</Card.Title>\n      <Card.Text>\n       <NumberFormat value= {latest.deaths} displayType={'text'} thousandSeparator={true} />\n      </Card.Text>\n    </Card.Body>\n    <Card.Footer>\n      <small  text={\"white\"}>Last updated {lastupdated}</small>\n    </Card.Footer>\n  </Card>\n</CardDeck>\n<Form>\n  <Form.Group controlId=\"formGroupSearch\">\n    <Form.Control type=\"text\" placeholder=\"Enter country name...\" \n    onChange={e => setSearchCountries(e.target.value)}/>\n  </Form.Group>\n</Form>\n<Columns queries={queries}>{countries}</Columns>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}